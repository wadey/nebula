on:
  push:
    tags:
    - 'v*'

name: Create release and upload binaries

jobs:
    #  build-ubuntu:
    #    name: Build All Cross Compiled Binaries
    #    runs-on: ubuntu-latest
    #    steps:
    #      - name: Set up Go 1.13
    #        uses: actions/setup-go@v1
    #        with:
    #          go-version: 1.13
    #
    #      - name: Checkout code
    #        uses: actions/checkout@v2
    #
    #      - name: Build release
    #        run: |
    #          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}" release
    #          mkdir release
    #          mv build/*.tar.gz release
    #
    #      - name: Upload artifacts
    #        uses: actions/upload-artifact@v1
    #        with:
    #          name: ubuntu-latest
    #          path: release
    #
    #          #  build-windows:
    #          #    name: Build Windows
    #          #    runs-on: windows-latest
    #          #    steps:
    #          #      - name: Set up Go 1.13
    #          #        uses: actions/setup-go@v1
    #          #        with:
    #          #          go-version: 1.13
    #          #
    #          #      - name: Checkout code
    #          #        uses: actions/checkout@v2
    #          #
    #          #      - name: Build
    #          #        run: |
    #          #          go build -trimpath -ldflags "-X main.Build=$(BUILD_NUMBER)" -o ./nebula ./cmd/nebula-service
    #          #          go build -trimpath -ldflags "-X main.Build=$(BUILD_NUMBER)" -o ./nebula-cert ./cmd/nebula-cert
    #          #
    #          #      - name: Tar
    #          #        run: |
    #          #          mkdir release
    #          #          tar -zcv -f release/${{ matrix.os }}.tar.gz -f $@ nebula nebula-cert
    #          #
    #          #      - name: Upload artifacts
    #          #        uses: actions/upload-artifact@v1
    #          #        with:
    #          #          name: ${{ matrix.os }}
    #          #          path: release

  build-linux:
    name: Build Linux
    runs-on: linux-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: |
          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}"

      - name: Tar
        run: |
          mkdir release
          tar -zcv -f release/nebula-linux-amd64.tar.gz -f $@ nebula nebula-cert

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: linux-latest
          path: release

  build-darwin:
    name: Build Darwin
    runs-on: macOS-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: |
          make BUILD_NUMBER="${GITHUB_REF#refs/tags/v}" service

      - name: Tar
        run: |
          mkdir release
          tar -zcv -f release/nebula-darwin-amd64.tar.gz -f $@ nebula nebula-cert

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: darwin-latest
          path: release

  release:
    name: Create and Upload Release
    needs: [build-linux, build-darwin]
    runs-on: ubuntu-latest
    steps:
      - name: Download ubuntu artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux-latest

          #      - name: Download windows artifacts
          #        uses: actions/download-artifact@v1
          #        with:
          #          name: windows-latest

      - name: Download Darwin artifacts
        uses: actions/download-artifact@v1
        with:
          name: darwin-latest

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload linux-amd64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-latest/nebula-linux-amd64.tar.gz
          asset_name: nebula-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload darwin-amd64
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./darwin-latest/nebula-darwin-amd64.tar.gz
          asset_name: nebula-darwin-amd64.tar.gz
          asset_content_type: application/gzip

          #      - name: Upload windows-amd64
          #        uses: actions/upload-release-asset@v1.0.1
          #        env:
          #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #        with:
          #          upload_url: ${{ steps.create_release.outputs.upload_url }}
          #          asset_path: ./windows-latest/windows-latest.tar.gz
          #          asset_name: nebula-windows-amd64.tar.gz
          #          asset_content_type: application/gzip
